/*
 * Copyright (C) 2020 Nain57
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; If not, see <http://www.gnu.org/licenses/>.
 */
package com.buzbuz.smartautoclicker.database.room

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase

/**
 * Database for the clicks.
 *
 * Declare the singleton structure for the database as shown in Android Developer code lab in order to make it
 * available for the whole application. Application should uses the [ClickDao] to access it by using
 * [ClickDatabase.getDatabase] and then [ClickDatabase.clickDao].
 *
 * Actual implementation is automatically generated by AndroidX Room.
 */
@Database(
    entities = [
        ScenarioEntity::class,
        ClickEntity::class,
        ConditionEntity::class,
        ClickConditionCrossRef::class
    ],
    version = 3,
    exportSchema = true
)
internal abstract class ClickDatabase : RoomDatabase() {

    /** The data access object for the click database. */
    abstract fun clickDao(): ClickDao

    companion object {

        /** Singleton preventing multiple instances of database opening at the same time. */
        @Volatile
        private var INSTANCE: ClickDatabase? = null

        /**
         * Migration from database v1 to v2.
         * Changes: conditions have now a customizable difference threshold.
         */
        private val MIGRATION_1_2 = object : Migration(1, 2) {
            override fun migrate(database: SupportSQLiteDatabase) {
                database.execSQL("ALTER TABLE condition_table ADD COLUMN threshold INTEGER DEFAULT 1 NOT NULL")
            }
        }

        /**
         * Migration from database v2 to v3.
         * Changes: clicks have now an optional amount of executions before the scenario is stopped.
         */
        private val MIGRATION_2_3 = object : Migration(2, 3) {
            override fun migrate(database: SupportSQLiteDatabase) {
                database.execSQL("ALTER TABLE click_table ADD COLUMN stop_after INTEGER DEFAULT NULL")
            }
        }

        /**
         * Get the Room database singleton, or instantiates it if it wasn't yet.
         * <p>
         * @param context the Android context.
         * <p>
         * @return the Room database singleton.
         */
        fun getDatabase(context: Context): ClickDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    ClickDatabase::class.java,
                    "click_database"
                ).addMigrations(MIGRATION_1_2)
                    .addMigrations(MIGRATION_2_3).build()
                INSTANCE = instance
                instance
            }
        }
    }
}