<?xml version="1.0" encoding="utf-8"?>
<!--
* Copyright (C) 2023 Kevin Buzeau
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<resources>
    <string name="activity_tutorial_name">Tutorial</string>

    <string name="message_score">Player: %1$d</string>
    <string name="message_high_score">Best: %1$d</string>
    <string name="message_time_left">Time left: %1$d</string>

    <string name="button_text_tutorial_start_game">Start game</string>
    <string name="button_text_tutorial_next">Next</string>

    <!--
      - Tutorials definition
      - Each tutorial must contains the following strings:
      -
      - * "item_title_tutorial_n": The name of the tutorial n in the tutorial list. Must be short.
      - * "item_desc_tutorial_n": The secondary text of the tutorial n in the tutorial list. Can contains more details,
      - is displayed on two lines if needed.
      - * "message_tutorial_n_game_instructions": The instructions for the game associated with the tutorial n.
      - * The following strings for each steps:
      -   * message_tutorial_n_step_i": The text displayed in the tutorial step i to guide the user during tutorial n.
      -   * message_tutorial_n_step_secondary_i": The text displayed below the tutorial step i image, if any, during
      - the tutorial n. This string is not mandatory for each step.
      -
      - Note: not all steps are displaying text, this is why there is not necessarily all step indexes defined here.
    -->

    <!-- One still target tutorial -->
    <string name="item_title_tutorial_1">Press a still target</string>
    <string name="item_desc_tutorial_1">Learn how to create your first event in order to click on a still target</string>
    <string name="message_tutorial_1_game_instructions">Click on the blue button as fast as possible</string>

    <string name="message_tutorial_1_step_1">Welcome to your first tutorial!\n\nHere, you will try to beat the high score
        of a game with the help of Klick\'r.\n\nFirst, start the game and try to win by yourself.</string>

    <string name="message_tutorial_1_step_3">Difficult, isn\'t it?\nLet\'s use Klick\'r to beat it !\n\n
        Click on the scenario configuration icon to start editing your new scenario.</string>

    <string name="message_tutorial_1_step_4">A Scenario is the root structure of Klick\'r automation.\n\n
        It contains the general detection settings and a list of Events describing what will be executed when running
        your Scenario. \n\nClick on the create event button to create your first event.</string>

    <string name="message_tutorial_1_step_5">An Event describe what Actions (click, swipeâ€¦) to execute when certain
        Conditions are met.\n\nYou must create at least one Condition and one Action in order to create a valid Event
        and use it in your scenario\n\nClick on the Conditions field to display the Conditions list.</string>

    <string name="message_tutorial_1_step_6">A Condition is a part of a screenshot that will be compared to each screen
        frame of your device.\n\nTo beat the game, we want to click on the blue character when it\'s visible, so we need
        a Condition that is fulfilled when the character is shown on your device screen.\n\nClick on the create
        Condition button to create your first Condition.</string>

    <string name="message_tutorial_1_step_7">The first step of a Condition creation is to take a screenshot for it.\n\n
        As we want to click when the blue character is visible, the screenshot must contains it. Start the game again in
        order to display it, and then take the screenshot.</string>
    <string name="message_tutorial_1_step_secondary_7">Use the capture button in the floating menu to take the screenshot.</string>

    <string name="message_tutorial_1_step_8">Once the screenshot is taken, you can crop it in order to only get the part
        that is interesting for the detection.</string>
    <string name="message_tutorial_1_step_secondary_8">If your screenshot does not contains the blue character, you can
        press this button to take a new one.</string>

    <string name="message_tutorial_1_step_9">For this game, the interesting part is the blue character, so crop your
        screenshot to only get him.\n\nYou can pinch on the screenshot to zoom on it and get a better accuracy for the
        crop selector.</string>
    <string name="message_tutorial_1_step_secondary_9">Ensure the character is complete in the selector. Also try to
        crop it as close as possible to him in order to ease the image detection.</string>

    <string name="message_tutorial_1_step_10">Your Condition image is now recorded!\n\nThere is now several adjustments
        that can be made to it, but the default settings suits our basic use case. As our target is not moving, it will
        only detect at the capture position, which is faster than detecting on the whole screen.\n\nClick on the save
        button to register it and return to the Conditions list.</string>

    <string name="message_tutorial_1_step_11">Close the Conditions list to return to the Event configuration.</string>

    <string name="message_tutorial_1_step_12">With this Condition, the scenario knows when to trigger the Actions.\n\n
        You now need to define what Actions to trigger, so for this game, a click on the blue character.\n\nClick on the
        Actions field to display the Actions list.</string>

    <string name="message_tutorial_1_step_13">An Action is something that is executed once the Conditions of its Event
        are fulfilled.\n\nIt can be a click, a swipe, a pause, an Intent (an interaction with another application) or a
        change in the Scenario execution, and multiple Actions can be defined for the same Event.\n\nClick on the create
        Action button to create your first Action.</string>

    <string name="message_tutorial_1_step_14">First, we need to pick a type for your Action.\n\nFor this game, we simply
        need to click on the blue character, so choose Click to create a new Click Action.</string>

    <string name="message_tutorial_1_step_15">A Click Action is defined by a position and a press duration.\n\nAs we
        want to click as quickly as possible, we can keep the default press duration of 1ms, which is the lowest
        possible value. So we only need to define a position.\n\nClick on the position picker button to select the Click
        Action position.</string>

    <string name="message_tutorial_1_step_16">You need to select the exact position to be clicked, so you need to start
        the game again to display the blue character, and then select its position.\n\nOnce the position is correct,
        click on the validate button to save it.</string>
    <string name="message_tutorial_1_step_secondary_16">You can\'t interact with the game while the position selector is
        visible, but you can use this button to show and hide it, allowing you to remove that restriction at will.</string>

    <string name="message_tutorial_1_step_17">The click is now correctly configured!\n\nClick on the save button to
        register it and return to the Actions list.</string>

    <string name="message_tutorial_1_step_18">Close the Actions list to return to the Event configuration.</string>

    <string name="message_tutorial_1_step_19">Your Event now have a Condition and an Action, which means it knows what
        to execute and when to execute it.\n\nClick on the save button to register it and return to the Scenario dialog.</string>

    <string name="message_tutorial_1_step_20">The only requirement for a Scenario is to have at least one Event.\n
        As our Event already cover how to win the game, we don\'t need anything else.\n\nClick on the save button the
        save the Scenario in database and close the configuration dialogs.</string>

    <string name="message_tutorial_1_step_21">As you can see, the play button is now available, meaning that your
        Scenario is valid and can be used for detection\n\nClick on it to start the detection.</string>

    <string name="message_tutorial_1_step_22">It\'s playing but nothing happens?\n\nThat\'s normal, it will click only
        when the blue character is visible, remember? While keeping the scenario running, press the start game button
        and just watch as Klick\'r will beat it for you!</string>

    <string name="message_tutorial_1_step_23">Congratulations!\n\nYou now know the basics of Klick\'r, but not
        all use cases will be as simple as this game.\nTake a look at the next tutorial to learn how to track a moving
        target</string>


    <!-- One moving target tutorial -->
    <string name="item_title_tutorial_2">Press a moving target</string>
    <string name="item_desc_tutorial_2">Change your event to click on a randomly moving target</string>
    <string name="message_tutorial_2_game_instructions">Click on the moving blue button as fast as possible</string>

    <string name="message_tutorial_2_step_1">Let\'s complicate the game a little bit more. Now, the target is randomly
        moving.\n\nFirst, start the game and check if you can win by yourself.</string>

    <string name="message_tutorial_2_step_3">Once again, it seems impossible to win manually, so let\'s use Smart
        AutoClicker.\n\nYour scenario for the previous tutorial have been kept and load for this tutorial, but we will
        need to change a few parameters in order to win this new game.\n\nClick on the Scenario configuration icon to
        start updating your new scenario.</string>

    <string name="message_tutorial_2_step_4">We still want to click on the blue character, meaning that we still only
        need one Condition and one Action, so only one Event.\n\nAs the use case is pretty similar to the previous game,
        we will keep our Event and simply update it.\n\nClick on your previously created event to edit it.</string>

    <string name="message_tutorial_2_step_5">In a first time, we will update the Condition that detect the blue
        character.\n\nClick on the Conditions field to display the Conditions list.</string>

    <string name="message_tutorial_2_step_6">As in the previous tutorial, we need to detect the blue character, but now
        it is moving.\n\nOur previous Condition is already detecting the blue character, but only at one position. So you
        don\'t need to take a new screenshot, as your previous Condition already has it, we just need to change its
        parameters.\n\nClick on your Condition to start editing it.</string>

    <string name="message_tutorial_2_step_7">Currently, the Condition detection type is set to \"Exact\", meaning it
        will only be verified at its capture position.\n\nTo win this game, we need verify the same Condition, but on
        the whole screen.\n\nSelect the \"Whole screen\" type to detect the blue character anywhere on
        the screen.</string>
    <string name="message_tutorial_2_step_secondary_7">Detecting on the whole screen takes more time that the exact
        position, keep that in mind when your Scenario execution timing is important.</string>

    <string name="message_tutorial_2_step_8">That\'s it!\nWe only needed to change the detection type in order for
        your Condition to suits our needs.\n\nClick on the save button to register it and return to the Conditions list.</string>

    <string name="message_tutorial_2_step_9">Close the Conditions list to return to the Event configuration.</string>

    <string name="message_tutorial_2_step_10">Your Condition image is now updated!\n\nIn this state, the scenario will
        now execute a click every time the blue character is visible anywhere on the screen, but this click will be at
        the same position, the one selected during the previous tutorial. So, we need to update our Action.\n\n
        Click on the Actions field to display the Actions list.</string>

    <string name="message_tutorial_2_step_11">We still want to execute a single click, but this time, we want to click
        on the Condition and not a fixed position.\n\nAs this is still one click, we still need only one Action, so
        let\'s edit your previous click.\n\nClick on your Action to start editing it.</string>

    <string name="message_tutorial_2_step_12">Currently, the Click Action \"Click on\" is set to \"Selected position\",
        meaning you have to manually set the position to be clicked. The other choice is \"Condition\", meaning the Action will click on a
        detected Condition coordinates.\n\nThat`s exactly what we need to beat the game. Every time the blue character
        will be detected, this Action will click on it.\n\nSelect it to use it in your Action.</string>

    <string name="message_tutorial_2_step_13">Click on the Condition selector option to select which detected condition
        to click on.\nWe need to specify it because we can have multiple Conditions in our Event.</string>

    <string name="message_tutorial_2_step_14">For our use case it is easy, we only have one condition, the blue character.\n\n
        Select it to click on this Condition when it is detected on your screen.</string>

    <string name="message_tutorial_2_step_15">That\'s it!\nYour Click Action is now correctly configured to beat the
        game.\n\nClick on the save button to register it and return to the Actions list.</string>

    <string name="message_tutorial_2_step_16">Close the Actions list to return to the Event configuration.</string>

    <string name="message_tutorial_2_step_17">You have updated the Condition and your Action, there is nothing more to
        do.\n\nClick on the save button to register it and return to the Scenario dialog.</string>

    <string name="message_tutorial_2_step_18">One last save to register your new changes in the database and close the
        configuration dialogs.</string>

    <string name="message_tutorial_2_step_19">Your Scenario is now configured to beat this new tutorial.\n\nStart the
        detection with the floating menu play button and then, start the game.</string>

    <string name="message_tutorial_2_step_20">Congratulations!\n\nYou now know how to track a still or moving single
        target, but there is a lot more to learn!.</string>


    <!-- Two still targets press when both are visible tutorial -->
    <string name="item_title_tutorial_3">Combine multiple conditions</string>
    <string name="item_desc_tutorial_3">Create and combine multiple conditions for your event</string>
    <string name="message_tutorial_3_game_instructions">Click on the blue button only when the red button is visible</string>

    <string name="message_tutorial_3_step_1">Let\'s change the rules of the game again. The blue target has stopped moving,
        but now it should only be clicked when the red target is visible.\n\nFirst, start the game and check if you can win
        by yourself.</string>

    <string name="message_tutorial_3_step_3">Once again, it seems impossible to win manually, so let\'s use Smart
        AutoClicker.\n\nYour scenario for the previous tutorial have been kept and load for this tutorial, but we will
        need to change a few parameters in order to win this new game.\n\nClick on the Scenario configuration icon to
        start updating your new scenario.</string>

    <string name="message_tutorial_3_step_4">We still want to click on the blue target, but only when red on is visible.\n
        So we need to add a condition for this red target in our Event.\n\nClick on your previously created event to edit it.</string>

    <string name="message_tutorial_3_step_5">We will combine several conditions, so we need to check the Condition operator
        for this event.\n\nThe Condition operator indicates how multiples conditions will be interpreted together.\n
        \'One\' means only one of the Conditions for this Event must be fulfilled in order
        to execute the Actions.\n\n\'All\' means all Conditions for this Event must be fulfilled in order to execute the Actions.
        \n\nAs we want to detect if two things are displayed together, we will use \'All\'</string>

    <string name="message_tutorial_3_step_6">Now we need to update our Conditions.\n\nClick on the Conditions field to display
        the Conditions list.</string>

    <string name="message_tutorial_3_step_7">The previous Condition of detecting the blue target is still correct, but we need
        a new one for the red target.\n\nClick on the create Condition button to create a new Condition for it.</string>

    <string name="message_tutorial_3_step_8">Just like for the blue target, start the game in order to show the red target.
        Once it is visible, take a screenshot of it!</string>
    <string name="message_tutorial_3_step_secondary_8">Use the capture button in the floating menu to take the screenshot.</string>

    <string name="message_tutorial_3_step_9">Is your screenshot containing the red target? You can crop it in order to only
        get the part that is interesting for the detection, the red target.</string>
    <string name="message_tutorial_3_step_secondary_9">If your screenshot does not contains the red target, you can
        press this button to take a new one.</string>

    <string name="message_tutorial_3_step_10">Your Condition image is now recorded!\n\nAs the red target isn\'t moving, we
        can keep the default configuration.\nClick on the save button to register it and return to the Conditions list.</string>

    <string name="message_tutorial_3_step_11">Close the Conditions list to return to the Event configuration.</string>

    <string name="message_tutorial_3_step_12">We now have two Conditions, one for each targets, and the Actions will be executed
        only if both are detected.\n\nClick on the Actions field to display the Action list for our Event.</string>

    <string name="message_tutorial_3_step_13">The action is already set to click on the blue character, and it will only be
        executed when the blue and the red characters are visible together.\n\nThis is exactly the behaviour we need to beat the
        game, so no need to edit our click Action.\n\nClose the Actions list to return to the Event configuration.</string>

    <string name="message_tutorial_3_step_14">Click on the save button to save your Event.</string>

    <string name="message_tutorial_3_step_15">All changes must be saved in your scenario in order to be registered.\n\Click
        on the save button to save your changes.</string>

    <string name="message_tutorial_3_step_16">We are ready to win this game!\n\nClick on the start button to start the
        detection and then, start the game.</string>

    <string name="message_tutorial_3_step_17">Congratulations!\n\nYou now know how to combine multiple Conditions for an Event,
        but there is a lot more to learn!</string>

    <!-- Two still targets press when only one is visible tutorial -->
    <string name="item_title_tutorial_4">Negative conditions</string>
    <string name="item_desc_tutorial_4">Verify that something is not displayed before executing an action</string>


    <!-- Two moving targets press in order tutorial -->
    <string name="item_title_tutorial_5">Multiple events scenario</string>
    <string name="item_desc_tutorial_5">Learn how to combine multiple events to achieve complex automation</string>

</resources>