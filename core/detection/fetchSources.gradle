/*
 * Copyright (C) 2024 Kevin Buzeau
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/** Path of the intermediate directory within the module build folder. */
def intermediateDirPath = "${buildDir.toPath()}/intermediates/$name"
/** Path of the OpenCV source code zip file in the intermediate build folder. */
def zipFilePath = "$intermediateDirPath/OpenCV-${libs.versions.openCv}.zip"
/** Path where the OpenCV source code is unzipped. */
def sourceCodePath = "${project.projectDir}/src/release/opencv"
/** Path of the OpenCV source code version. */
def sourceCodeVersionPath = "${sourceCodePath}/version.txt"

/** Download the OpenCV zipped source code from github. */
tasks.register("downloadZip") {
    def zipFile = file(zipFilePath)
    outputs.file(zipFile)

    doLast {
        def intermediateDir = file(intermediateDirPath)
        if (intermediateDir.exists()) {
            delete intermediateDir
        }
        mkdir intermediateDir

        if (!zipFile.exists()) {
            new URL("https://github.com/opencv/opencv/archive/refs/tags/${libs.versions.openCv}.zip")
                    .withInputStream { i ->
                        zipFile.withOutputStream { it << i }
                    }
        }
    }
}

/** Extract the OpenCV source code. */
tasks.register("extractZip", Sync) {
    from downloadZip

    def sourceCodeVersionFile = file(sourceCodeVersionPath)
    if (sourceCodeVersionFile.exists()) {
        if (sourceCodeVersionFile.text != "${libs.versions.openCv}") {
            delete sourceCodePath
        }
    }

    from(zipTree(zipFilePath)) {
        include "**"
        includeEmptyDirs = false
        eachFile { fcd ->
            fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
        }
    }

    into file(sourceCodePath)

    doLast {
        file(sourceCodeVersionPath).text = "${libs.versions.openCv}"
    }
}

project.afterEvaluate {
    tasks.findAll {task ->
        task.name.startsWith("configureCMakeRelease")
    }.forEach {task ->
        task.dependsOn("extractZip")
    }
}
