/*
 * Copyright (C) 2023 Kevin Buzeau
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

// Only apply gms/firebase plugins if we are building for the play store
if (getGradle().getStartParameter().getTaskRequests().toString().contains("PlayStore")) {
    apply plugin: "com.google.gms.google-services"
    apply plugin: "com.google.firebase.crashlytics"
}

// Read signing.properties file to find signing configuration
def signingProperties = new Properties()
def signingStoreFile = file('./smartautoclicker.jks')
def signingPropertiesFile = rootProject.file("signing.properties")
if (signingPropertiesFile.exists()) {
    signingProperties.load(new FileInputStream(signingPropertiesFile))
}

android {
    namespace 'com.buzbuz.smartautoclicker'
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.buzbuz.smartautoclicker"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.compileSdkVersion
        versionCode 27
        versionName "2.1.1"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        kotlin {
            kotlinOptions {
                freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            }
        }

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    if (signingStoreFile.exists()) {
        signingConfigs {
            release {
                storeFile file('./smartautoclicker.jks')
                storePassword signingProperties['signingStorePassword'] ?: rootProject.signingStorePassword
                keyAlias signingProperties['signingKeyAlias'] ?: rootProject.signingKeyAlias
                keyPassword signingProperties['signingKeyPassword'] ?: rootProject.signingKeyPassword
            }
        }
    }

    buildTypes {
        release {
            if (signingStoreFile.exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debugFDroid {
            applicationIdSuffix '.debug'
        }
    }

    // Specifies one flavor dimension.
    flavorDimensions += "version"
    productFlavors {
        create("fDroid") {
            dimension = "version"
        }
        create("playStore") {
            dimension = "version"
        }
    }

    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/atomicfu.kotlin_module']
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"

    implementation "androidx.core:core-ktx:${rootProject.ext.androidxCoreVersion}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.androidxAppCompatVersion}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.androidxRecyclerViewVersion}"
    implementation "androidx.fragment:fragment-ktx:${rootProject.androidxFragmentVersion}"

    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.androidxLifecycleExtensionVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.androidxLifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${rootProject.ext.androidxLifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.androidxLifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${rootProject.ext.androidxLifecycleVersion}"

    implementation "com.airbnb.android:lottie:$lottieVersion"
    implementation "com.google.android.material:material:${rootProject.ext.googleMaterialVersion}"

    // Google Play Store version dependencies only
    playStoreImplementation platform("com.google.firebase:firebase-bom:${rootProject.ext.firebaseBomVersion}")
    playStoreImplementation 'com.google.firebase:firebase-crashlytics-ktx'

    implementation project(path: ':core:detection')
    implementation project(path: ':core:display')
    implementation project(path: ':core:domain')
    implementation project(path: ':core:extensions')
    implementation project(path: ':core:processing')
    implementation project(path: ':core:ui')
    implementation project(path: ':feature:backup')
    implementation project(path: ':feature:billing')
    implementation project(path: ':feature:floating-menu')
    implementation project(path: ':feature:scenario-config')
    implementation project(path: ':feature:scenario-debugging')
}
